{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEeC,SAASC,cAAc,UA6C/BC,iBAAiB,SA3CR,SAAAC,GACd,IAAMC,EAAkBJ,SAASC,cAAc,kBACzCI,EAAiBL,SAASC,cAAc,iBACxCK,EAAcN,SAASC,cAAc,mBACvCM,EAAaC,SAASJ,EAAgBK,OACpCC,EAAYF,SAASH,EAAeI,OACpCE,EAASH,SAASF,EAAYG,OAEpC,GADAN,EAAES,iBAE0B,KAA1BR,EAAgBK,OACS,KAAzBJ,EAAeI,OACO,KAAtBH,EAAYG,MAEZI,EAAAf,GAASgB,OAAOC,QAAQ,+BAExB,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAQK,GAAK,EAChCC,EAAcD,EAAGT,GACdW,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MACjBR,EAAAf,GAASgB,OAAOQ,QACd,uBAAwCC,OAAfH,EAAS,QAAYG,OAANF,EAAM,M,IAGjDG,OAAM,SAAAL,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAClBR,EAAAf,GAASgB,OAAOW,QACd,sBAAqCF,OAAfH,EAAS,QAAYG,OAANF,EAAM,M,IAGjDd,GAAcG,EAGlB,SAASO,EAAcG,EAAUC,GAC/B,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEP,WAAUC,UAEpBO,EAAO,CAAER,WAAUC,S,GAEpBd,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst button = document.querySelector('button');\n\nconst onClick = e => {\n  const firstDelayInput = document.querySelector('[name=\"delay\"]');\n  const stepDelayInput = document.querySelector('[name=\"step\"]');\n  const amountInput = document.querySelector('[name=\"amount\"]');\n  let firstDelay = parseInt(firstDelayInput.value);\n  const stepDelay = parseInt(stepDelayInput.value);\n  const amount = parseInt(amountInput.value);\n  e.preventDefault();\n  if (\n    firstDelayInput.value === '' ||\n    stepDelayInput.value === '' ||\n    amountInput.value === ''\n  ) {\n    Notiflix.Notify.warning('Fill in all the fields');\n  } else {\n    for (let i = 1; i <= amount; i += 1) {\n      createPromise(i, firstDelay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n      firstDelay += stepDelay;\n    }\n  }\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, firstDelay);\n    });\n  }\n};\nbutton.addEventListener('click', onClick);\n"],"names":["$6JpON","parcelRequire","document","querySelector","addEventListener","e","firstDelayInput","stepDelayInput","amountInput","firstDelay","parseInt","value","stepDelay","amount","preventDefault","$parcel$interopDefault","Notify","warning","i","createPromise","then","param","position","delay","success","concat","catch","failure","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.95cb4a5f.js.map"}